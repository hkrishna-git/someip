/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.14.v202310241606.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/commonapi/examples/AttributesSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {
namespace examples {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createAttributesSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< AttributesSomeIPProxy>(_address, _connection);
}

void initializeAttributesSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:commonapi.examples.Attributes:v1_0:commonapi.examples.Attributes",
        0x1234, 0x5678, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "commonapi.examples.Attributes:v1_0",
        &createAttributesSomeIPProxy);
}

INITIALIZER(registerAttributesSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeAttributesSomeIPProxy);
}

AttributesSomeIPProxy::AttributesSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          test_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x80f2), CommonAPI::SomeIP::event_id_t(0x80f2), CommonAPI::SomeIP::method_id_t(0xbb8), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, CommonAPI::SomeIP::method_id_t(0xbb9), true, static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr))
{
}

AttributesSomeIPProxy::~AttributesSomeIPProxy() {
}

AttributesSomeIPProxy::TestAttribute& AttributesSomeIPProxy::getTestAttribute() {
    return test_;
}


void AttributesSomeIPProxy::dojob(int16_t _input, CommonAPI::CallStatus &_internalCallStatus, std::string &_msg, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< int16_t, CommonAPI::SomeIP::IntegerDeployment<int16_t>> deploy_input(_input, static_cast< CommonAPI::SomeIP::IntegerDeployment<int16_t>* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_msg(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int16_t,
                CommonAPI::SomeIP::IntegerDeployment<int16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7fff),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_input,
        _internalCallStatus,
        deploy_msg);
    _msg = deploy_msg.getValue();
}

std::future<CommonAPI::CallStatus> AttributesSomeIPProxy::dojobAsync(const int16_t &_input, DojobAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< int16_t, CommonAPI::SomeIP::IntegerDeployment<int16_t>> deploy_input(_input, static_cast< CommonAPI::SomeIP::IntegerDeployment<int16_t>* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_msg(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int16_t,
                CommonAPI::SomeIP::IntegerDeployment<int16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7fff),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_input,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _msg) {
            if (_callback)
                _callback(_internalCallStatus, _msg.getValue());
        },
        std::make_tuple(deploy_msg));
}

void AttributesSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> AttributesSomeIPProxy::getCompletionFuture() {
    return CommonAPI::SomeIP::Proxy::getCompletionFuture();
}

} // namespace examples
} // namespace commonapi
} // namespace v1
